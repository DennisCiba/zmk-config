#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#include "glove80.dtsi"

#define LAYER_Bone1 0
#define LAYER_Bone3 1
#define LAYER_Bone4 2
#define LAYER_Magic 3
#define LAYER_Game  4

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

#ifndef RGB_STATUS
#define RGB_STATUS 0
#endif


/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

// Homerow Mods
#define HRM_FLAVOR "balanced"
#define HRM_TAPPING_TERM_MS 300
#define HRM_QUICK_TAP_MS 200
#define HRM_REQUIRE_PRIOR_IDLE_MS 1

/ {
    behaviors {
        lhrm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = HRM_FLAVOR;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            tapping-term-ms = <HRM_TAPPING_TERM_MS>;
            quick-tap-ms = <HRM_QUICK_TAP_MS>;
            require-prior-idle-ms = <HRM_REQUIRE_PRIOR_IDLE_MS>;
            bindings = <&kp>, <&kp>;
        };
        rhrm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = HRM_FLAVOR;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            tapping-term-ms = <HRM_TAPPING_TERM_MS>;
            quick-tap-ms = <HRM_QUICK_TAP_MS>;
            require-prior-idle-ms = <HRM_REQUIRE_PRIOR_IDLE_MS>;
            bindings = <&kp>, <&kp>;
        };
        lhrml: left_homerow_mods_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = HRM_FLAVOR;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            tapping-term-ms = <HRM_TAPPING_TERM_MS>;
            quick-tap-ms = <HRM_QUICK_TAP_MS>;
            require-prior-idle-ms = <HRM_REQUIRE_PRIOR_IDLE_MS>;
            bindings = <&mo>, <&kp>;
        };
        rhrml: right_homerow_mods_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = HRM_FLAVOR;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            tapping-term-ms = <HRM_TAPPING_TERM_MS>;
            quick-tap-ms = <HRM_QUICK_TAP_MS>;
            require-prior-idle-ms = <HRM_REQUIRE_PRIOR_IDLE_MS>;
            bindings = <&mo>, <&kp>;
        };
    };
};

/ {
    macros {
        vim1: vim1 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <35>;
            tap-ms = <35>;
            bindings
                = <&kp ESC>,
                  <&kp LS(DOT)>,
                  <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>,
                  <&kp RET>;
        };
        vim2: vim2 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            wait-ms = <35>;
            tap-ms = <35>;
            bindings
                = <&kp ESC>,
                  <&kp LS(DOT)>,
                  <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>,
                  <&macro_param_2to1>, <&kp MACRO_PLACEHOLDER>,
                  <&kp RET>;
        };
        vim1a: vim1a {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <35>;
            tap-ms = <35>;
            bindings
                = <&kp ESC>,
                  <&kp LS(DOT)>,
                  <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>,
                  <&kp A>,
                  <&kp RET>;
        };
        vim2a: vim2a {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            wait-ms = <35>;
            tap-ms = <35>;
            bindings
                = <&kp ESC>,
                  <&kp LS(DOT)>,
                  <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>,
                  <&macro_param_2to1>, <&kp MACRO_PLACEHOLDER>,
                  <&kp A>,
                  <&kp RET>;
        };
   };
};


/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Bone1 {
            bindings = <
               &kp F1          &kp F2        &kp F3      &kp F4      &kp F5                                                                                            &kp F6      &kp F7        &kp F8       &kp F9        &kp F10
            &kp CARET          &kp N1        &kp N2      &kp N3      &kp N4    &kp N5                                                                      &kp N6      &kp N7      &kp N8        &kp N9       &kp N0       &kp FSLH
             &kp CAPS           &kp J         &kp D       &kp U       &kp A     &kp X                                                                       &kp P       &kp H       &kp L         &kp M        &kp W      &kp MINUS
           &caps_word  &lhrm LSHIFT C  &lhrm LGUI T  &lhrml 1 I  &lhrml 2 E     &kp O                                                                       &kp B  &rhrml 2 N  &rhrml 1 R  &rhrm RGUI S  &rhrm RSHIFT G          &kp Q
             &kp LGUI           &kp F         &kp V    &kp LBKT     &kp SQT  &kp SEMI    &kp TAB  &kp LCTRL     &kp LALT    &kp RALT  &kp RCTRL    &kp ESC  &kp Z       &kp Y   &kp COMMA       &kp DOT        &kp K  &kp LS(EQUAL)
 &magic LAYER_Magic 0        &kp HOME       &kp END    &kp LEFT   &kp RIGHT             &kp BSPC    &kp DEL   &kp LSHIFT  &kp RSHIFT    &kp RET  &kp SPACE             &kp UP    &kp DOWN        &none        &none      &to LAYER_Game
            >;
        };

        layer_Bone3 {
            bindings = <
   &none          &none         &none                &none         &none                                                                                                         &none                &none         &none          &none      &none
   &none          &none         &none                &none     &kp RA(Y)      &kp RA(X)                                                                                     &kp LS(N4)            &kp RA(E)     &kp RA(V)      &kp RA(B)  &kp RA(N)      &none
 &kp TAB    &kp RA(DOT)  &kp LS(FSLH)           &kp RA(N8)    &kp RA(N9)      &kp GRAVE                                                                      &kp EXCL  &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp KP_EQUAL     &kp LS(N6)      &none
 &kp ESC  &kp RA(MINUS)  &kp KP_SLASH           &kp RA(N7)    &kp RA(N0)   &kp LS(RBKT)                                                                 &kp LS(MINUS)       &kp LS(N8)           &kp LS(N9)      &kp FSLH    &kp LS(DOT)  &kp RA(Q)
   &none       &kp BSLH    &kp LS(N4)  &kp RA(NON_US_BSLH)  &kp RA(RBKT)  &kp LS(EQUAL)  &vim1 W  &vim2 W Q  &vim1 Q  &vim1a Q   &vim2a W Q  &vim1a W        &kp RBKT       &kp LS(N5)           &kp LS(N2)  &kp LS(BSLH)  &kp LS(COMMA)      &none
   &none          &none         &none                &none         &none                  &trans     &trans   &trans   &trans      &trans   &trans                               &none                &none         &none          &none      &none
            >;
        };

        layer_Bone4 {
            bindings = <
  &none   &none     &none     &none      &none                                                                    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE          &none         &none
  &none   &none     &none     &none      &none   &none                                                   &none  &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT          &none         &none
 &trans   &none  &kp HOME    &kp UP    &kp END   &none                                                   &none            &kp N7      &kp N8      &kp N9    &kp KP_PLUS  &kp KP_MINUS
 &trans   &none  &kp LEFT  &kp DOWN  &kp RIGHT   &none                                                   &none            &kp N4      &kp N5      &kp N6      &kp COMMA       &kp DOT
  &none   &none     &none     &none      &none   &none  &trans  &trans  &trans  &trans  &trans  &trans   &none            &kp N1      &kp N2      &kp N3  &kp LS(COMMA)         &none
  &none   &none     &none     &none      &none          &trans  &trans  &trans  &trans  &trans  &trans                    &kp N0      &kp N0      &kp N0          &none         &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };

        layer_Game {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                      &kp F6     &kp F7   &kp F8   &kp F9             &kp F10
            &kp CARET    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                      &kp N6  &kp N7     &kp N8   &kp N9   &kp N0            &kp FSLH
             &kp  TAB     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                       &kp Z   &kp U      &kp I    &kp O    &kp P            &kp LBKT
              &kp ESC     &kp A    &kp S     &kp D      &kp F   &kp G                                                                       &kp H   &kp J      &kp K    &kp L  &kp SQT               &kp Q
             &kp LGUI     &kp Z    &kp X     &kp C      &kp V   &kp B   &kp TAB  &kp LCTRL     &kp LALT    &kp RALT  &kp RCTRL    &kp ESC   &kp N   &kp M  &kp COMMA  &kp DOT    &kp K       &kp LS(EQUAL)
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp BSPC    &kp DEL   &kp LSHIFT  &kp RSHIFT    &kp RET  &kp SPACE          &kp UP   &kp DOWN    &none    &none      &to LAYER_Bone1
            >;
        };
};
